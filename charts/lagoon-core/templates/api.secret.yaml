{{/*
This somewhat complex logic is intended to:
  * generate a random secret value automatically on chart install
  * not overwrite the randomly generated value on upgrade
  * allow overriding if the value is explicitly defined
*/}}
{{- $data := index (lookup "v1" "Secret" .Release.Namespace (include "lagoon-core.api.fullname" .)) "data" | default dict }}
{{- $harborAdminPassword := coalesce .Values.harborAdminPassword (ternary (randAlpha 32) (index $data "HARBOR_ADMIN_PASSWORD" | default "" | b64dec) (index $data "HARBOR_ADMIN_PASSWORD" | empty)) }}
{{- $logsDBAdminPassword := coalesce .Values.logsDBAdminPassword (ternary (randAlpha 32) (index $data "LOGSDB_ADMIN_PASSWORD" | default "" | b64dec) (index $data "LOGSDB_ADMIN_PASSWORD" | empty)) }}
{{- $redisPassword := coalesce .Values.redisPassword (ternary (randAlpha 32) (index $data "REDIS_PASSWORD" | default "" | b64dec) (index $data "REDIS_PASSWORD" | empty)) }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ include "lagoon-core.api.fullname" . }}
  labels:
    {{- include "lagoon-core.api.labels" . | nindent 4 }}
stringData:
  ELASTICSEARCH_HOST: {{ required "A valid .Values.elasticsearchHost required!" .Values.elasticsearchHost | quote }}
  HARBOR_ADMIN_PASSWORD: {{ $harborAdminPassword | quote }}
  LOGSDB_ADMIN_PASSWORD: {{ $logsDBAdminPassword | quote }}
  REDIS_PASSWORD: {{ $redisPassword | quote }}

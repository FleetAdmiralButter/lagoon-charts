{{/*
This somewhat complex logic is intended to:
  * generate a random secret value automatically on chart install
  * not overwrite the randomly generated value on upgrade
  * allow overriding if the value is explicitly defined
*/}}
{{- $data := index (lookup "v1" "Secret" .Release.Namespace (print (include "lagoon-core.keycloak.fullname" . ) "-env")) "data" | default dict }}
{{- $keycloakDBPassword := coalesce .Values.keycloakDBPassword (ternary (randAlpha 32) (index $data "DB_PASSWORD" | default "" | b64dec) (index $data "DB_PASSWORD" | empty)) }}
{{- $keycloakAuthServerClientSecret := coalesce .Values.keycloakAuthServerClientSecret (ternary uuidv4 (index $data "KEYCLOAK_AUTH_SERVER_CLIENT_SECRET" | default "" | b64dec) (index $data "KEYCLOAK_AUTH_SERVER_CLIENT_SECRET" | empty)) }}
{{- $keycloakLagoonAdminPassword := coalesce .Values.keycloakLagoonAdminPassword (ternary (randAlpha 32) (index $data "KEYCLOAK_LAGOON_ADMIN_PASSWORD" | default "" | b64dec) (index $data "KEYCLOAK_LAGOON_ADMIN_PASSWORD" | empty)) }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ include "lagoon-core.keycloak.fullname" . }}-env
  labels:
    {{- include "lagoon-core.keycloak.labels" . | nindent 4 }}
stringData:
  DB_PASSWORD: {{ $keycloakDBPassword | quote }}
  KEYCLOAK_AUTH_SERVER_CLIENT_SECRET: {{ $keycloakAuthServerClientSecret | quote }}
  KEYCLOAK_LAGOON_ADMIN_PASSWORD: {{ $keycloakLagoonAdminPassword | quote }}

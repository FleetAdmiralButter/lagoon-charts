{{/*
This somewhat complex logic is intended to:
  * generate a random secret value automatically on chart install
  * not overwrite the randomly generated value on upgrade
  * allow overriding if the value is explicitly defined
*/}}
{{- $secretSeed := randAlpha 32 }}
{{- $jwtExist := index (lookup "v1" "Secret" .Release.Namespace (print (include "lagoon-core.fullname" . ) "-jwtsecret")) "data" | default dict }}
{{- $jwtSecret := coalesce .Values.jwtSecret (ternary $secretSeed (index $jwtExist "JWTSECRET" | default "" | b64dec) (index $jwtExist "JWTSECRET" | empty)) }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ include "lagoon-core.fullname" . }}-jwtsecret
  labels:
    {{- include "lagoon-core.labels" . | nindent 4 }}
stringData:
  JWTSECRET: {{ $jwtSecret | quote }}
---
{{/*
This additonally complex logic is intended to handle the projectsecret:
  * use a specified PROJECTSECRET (either in values or via --set),
  * copy the existing JWTSECRET to allow backwards compatibility
  * not overwrite the set value on upgrade
  * allow overriding if the value is explicitly defined
*/}}
{{- $projExist := index (lookup "v1" "Secret" .Release.Namespace (print (include "lagoon-core.fullname" . ) "-projectsecret")) "data" | default dict }}
{{- $projSecret := coalesce .Values.projectSecret (ternary (index $jwtExist "JWTSECRET" | default "" | b64dec) (index $projExist "PROJECTSECRET" | default "" | b64dec) (index $projExist "PROJECTSECRET" | empty)) $secretSeed }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ include "lagoon-core.fullname" . }}-projectsecret
  labels:
    {{- include "lagoon-core.labels" . | nindent 4 }}
stringData:
  PROJECTSECRET: {{ $projSecret | quote }}
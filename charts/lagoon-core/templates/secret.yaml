{{/*
This somewhat complex logic is intended to:
  * generate a random secret value automatically on chart install
  * not overwrite the randomly generated value on upgrade
  * allow overriding if the value is explicitly defined
*/}}
{{- $jwtExist := index (lookup "v1" "Secret" .Release.Namespace (print (include "lagoon-core.fullname" . ) "-jwtsecret")) "data" | default dict }}
{{- $jwtSecret := coalesce .Values.jwtSecret (ternary (randAlpha 32) (index $jwtExist "JWTSECRET" | default "" | b64dec) (index $jwtExist "JWTSECRET" | empty)) }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ include "lagoon-core.fullname" . }}-jwtsecret
  labels:
    {{- include "lagoon-core.labels" . | nindent 4 }}
stringData:
  JWTSECRET: {{ $jwtSecret | quote }}
---
{{/*
This additonally complex logic is intended to handle the projectseed:
  * copy the existing JWTSECRET to allow backwards compatibility
  * create a new seed for fresh installs
  * not overwrite the set value on upgrade
  * allow overriding only if the value is explicitly defined
*/}}
{{- $seedExist := index (lookup "v1" "Secret" .Release.Namespace (print (include "lagoon-core.fullname" . ) "-projectseed")) "data" | default dict }}
{{- $projSeed := coalesce .Values.projectSeed (ternary (index $jwtExist "JWTSECRET" | default "" | b64dec) (index $seedExist "PROJECTSEED" | default "" | b64dec) (index $seedExist "PROJECTSEED" | empty)) (randAlpha 32) }}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ include "lagoon-core.fullname" . }}-projectseed
  labels:
    {{- include "lagoon-core.labels" . | nindent 4 }}
stringData:
  PROJECTSEED: {{ $projSeed | quote }}